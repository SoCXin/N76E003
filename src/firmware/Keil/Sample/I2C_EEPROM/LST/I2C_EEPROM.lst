C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE I2C_EEPROM
OBJECT MODULE PLACED IN .\Output\I2C_EEPROM.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\I2C_EEPROM.c BROWSE INCDIR(..\..\Include) DEFINE(FOSC_160000) DEBUG OB
                    -JECTEXTEND PRINT(.\LST\I2C_EEPROM.lst) TABS(2) OBJECT(.\Output\I2C_EEPROM.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Nuvoton Technoledge Corp. 
   9          //  Website: http://www.nuvoton.com
  10          //  E-Mail : MicroC-8bit@nuvoton.com
  11          //  Date   : Jun/21/2017
  12          //********************************************************************************************************
             -***
  13          
  14          //********************************************************************************************************
             -***
  15          //  File Function: N76E003 I2C demo code, Slave Address of 24LC64 = 0xA0
  16          //
  17          //   ____________           ______________ 
  18          //  |            |   SDA    |             |
  19          //  |            |<-------->|             |
  20          //  |            |          |             |
  21          //  |N76E003(M) |          |   24LC64(S) |
  22          //  |            |   SCL    |             |
  23          //  |            |--------->|             |
  24          //  |____________|          |_____________|
  25          //
  26          //  Microchip I2C EEPROM 24xx64 (64K Bit) is used as the slave device.  
  27          //  The page size are 32Byte. Total are 256 page.
  28          //  If verification passes, Port3 will show 0x78. If there is any failure
  29          //  occured during the progress, Port3 will show 0x00.
  30          //********************************************************************************************************
             -***
  31          
  32          #include "N76E003.h"
  33          #include "SFR_Macro.h"
  34          #include "Function_define.h"
  35          #include "Common.h"
  36          #include "Delay.h"
  37          
  38          #define SYS_CLK_EN              0
  39          #define SYS_SEL                 2
  40          #define SYS_DIV_EN              0                   //0: Fsys=Fosc, 1: Fsys = Fosc/(2*CKDIV)
  41          #define SYS_DIV                 1
  42          #define I2C_CLOCK               2
  43          
  44          #define EEPROM_SLA              0xA0
  45          #define EEPROM_WR               0
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 2   

  46          #define EEPROM_RD               1
  47          
  48          #define LED                     P3
  49          #define PAGE_SIZE               32
  50          #define PAGE_NUMBER             4
  51          
  52          #define ERROR_CODE              0x78
  53          #define TEST_OK                 0x00
  54          
  55          bit I2C_Reset_Flag;
  56          //========================================================================================================
  57          void Init_I2C(void)
  58          {
  59   1          P13_OpenDrain_Mode;         // Modify SCL pin to Open drain mode. don't forget the pull high resister in cir
             -cuit
  60   1          P14_OpenDrain_Mode;         // Modify SDA pin to Open drain mode. don't forget the pull high resister in cir
             -cuit
  61   1        
  62   1          /* Set I2C clock rate */
  63   1          I2CLK = I2C_CLOCK; 
  64   1      
  65   1          /* Enable I2C */
  66   1          set_I2CEN;                                   
  67   1      }
  68          //========================================================================================================
  69          void I2C_SI_Check(void)
  70          {
  71   1          if (I2STAT == 0x00)
  72   1          {
  73   2              I2C_Reset_Flag = 1;
  74   2              set_STO;
  75   2              SI = 0;
  76   2              if(SI)
  77   2              {
  78   3                  clr_I2CEN;
  79   3                  set_I2CEN;
  80   3                  clr_SI;
  81   3                  clr_I2CEN;    
  82   3              }   
  83   2          } 
  84   1      }
  85          
  86          void One_Page_Read(UINT8 u8PageNumber,UINT8 u8DAT)
  87          {
  88   1          UINT8  u8Count;
  89   1          UINT16 u16Address;
  90   1      
  91   1          u16Address = (UINT16)u8PageNumber*32;
  92   1      
  93   1          /* Step1 */
  94   1          set_STA;                                /* Send Start bit to I2C EEPROM */
  95   1          clr_SI;
  96   1          while (!SI);
  97   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
  98   1          {
  99   2              I2C_Reset_Flag = 1;
 100   2              printf("\nI2C 'Send STA' error");
 101   2              goto Read_Error_Stop;
 102   2          }
 103   1      
 104   1          /* Step2 */
 105   1          I2DAT = (EEPROM_SLA | EEPROM_WR);       /* Send (SLA+W) to EEPROM */
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 3   

 106   1          clr_STA;                                /* Clear STA and Keep SI value in I2CON */    
 107   1          clr_SI;
 108   1          while (!SI);
 109   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -             
 110   1          {
 111   2              I2C_Reset_Flag = 1;
 112   2              printf("\nI2C 'Send SLA+W' error");
 113   2              goto Read_Error_Stop;
 114   2          }
 115   1      
 116   1          /* Step3 */
 117   1          I2DAT = HIBYTE(u16Address);             /* Send I2C EEPROM's High Byte Address */
 118   1          clr_SI;
 119   1          while (!SI);
 120   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */              
 121   1          {
 122   2              I2C_Reset_Flag = 1;
 123   2              printf("\nI2C 'Send I2C High Byte Address' error");
 124   2              goto Read_Error_Stop;
 125   2          }
 126   1      
 127   1          /* Step4 */
 128   1          I2DAT = LOBYTE(u16Address);             /* Send I2C EEPROM's Low Byte Address */
 129   1          clr_SI;
 130   1          while (!SI);
 131   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */             
 132   1          {
 133   2              I2C_Reset_Flag = 1;
 134   2              printf("\nI2C 'Send I2C Low Byte Address' error");
 135   2              goto Read_Error_Stop;
 136   2          }
 137   1      
 138   1          /* Step5 */
 139   1          set_STA;                                /* Repeated START */
 140   1          clr_SI; 
 141   1          while (!SI);
 142   1          if (I2STAT != 0x10)                     /* 0x10: A repeated START condition has been transmitted */
 143   1          {
 144   2              I2C_Reset_Flag = 1;
 145   2              printf("\nI2C 'Send STA' error");
 146   2              goto Read_Error_Stop;
 147   2          }
 148   1      
 149   1          /* Step6 */
 150   1          clr_STA;                                /* Clear STA and Keep SI value in I2CON */
 151   1          I2DAT = (EEPROM_SLA | EEPROM_RD);       /* Send (SLA+R) to EEPROM */
 152   1          clr_SI;
 153   1          while (!SI);
 154   1          if (I2STAT != 0x40)                     /* 0x40:  SLA+R has been transmitted; ACK has been received */
             -              
 155   1          {
 156   2              I2C_Reset_Flag = 1;
 157   2              printf("\nI2C 'Send SLA+R' error");
 158   2              goto Read_Error_Stop;
 159   2          }
 160   1      
 161   1          /* Step7 */                             /* Verify I2C EEPROM data */
 162   1          for (u8Count = 0; u8Count <PAGE_SIZE; u8Count++)
 163   1          {
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 4   

 164   2              set_AA;                             /* Set Assert Acknowledge Control Bit */
 165   2              clr_SI;
 166   2              while (!SI);
 167   2              if (I2STAT != 0x50)                 /* 0x50:Data byte has been received; NOT ACK has been returned
             - */              
 168   2              {
 169   3                  I2C_Reset_Flag = 1;
 170   3                  printf("\nI2C 'No Ack' error");
 171   3                  goto Read_Error_Stop;
 172   3              }
 173   2             
 174   2              if (I2DAT != u8DAT)                 /* Send the Data to EEPROM */    
 175   2              {
 176   3                  I2C_Reset_Flag = 1;
 177   3                  printf("\nI2C 'Read data' error");
 178   3                  goto Read_Error_Stop;
 179   3              }
 180   2              u8DAT = ~u8DAT; 
 181   2          }
 182   1      
 183   1          /* Step8 */
 184   1          clr_AA;                                 /* Send a NACK to disconnect 24xx64 */
 185   1          clr_SI;
 186   1          while (!SI);
 187   1          if (I2STAT != 0x58)                     /* 0x58:Data byte has been received; ACK has been returned */
 188   1          {
 189   2              I2C_Reset_Flag = 1;
 190   2              printf("\nI2C 'Ack' error");
 191   2              goto Read_Error_Stop;
 192   2          }
 193   1          
 194   1        /* Step9 */    
 195   1          clr_SI;
 196   1          set_STO;
 197   1          while (STO)                        /* Check STOP signal */
 198   1          {
 199   2            I2C_SI_Check();
 200   2            if (I2C_Reset_Flag)
 201   2              goto Read_Error_Stop;
 202   2          }
 203   1          
 204   1      Read_Error_Stop: 
 205   1          if (I2C_Reset_Flag)
 206   1          {
 207   2              I2C_SI_Check();
 208   2              printf("\nI2C Read error, test stop");
 209   2              I2C_Reset_Flag = 0;
 210   2          }
 211   1      }
 212          //========================================================================================================
 213          void One_Page_Write(UINT8 u8PageNumber,UINT8 u8DAT)
 214          {
 215   1          UINT8  u8Count;
 216   1          UINT16 u16Address;
 217   1      
 218   1          u16Address = (UINT16)u8PageNumber*32;
 219   1      
 220   1          /* Step1 */
 221   1          set_STA;                                /* Send Start bit to I2C EEPROM */         
 222   1          clr_SI;
 223   1          while (!SI);
 224   1          if (I2STAT != 0x08)                     /* 0x08:  A START condition has been transmitted*/
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 5   

 225   1          {
 226   2              I2C_Reset_Flag = 1;
 227   2              printf("\nI2C 'Send STA' error");
 228   2              goto Write_Error_Stop;
 229   2          }
 230   1      
 231   1          /* Step2 */
 232   1          clr_STA;                                /* Clear STA and Keep SI value in I2CON */
 233   1          I2DAT = EEPROM_SLA | EEPROM_WR;         /* Send (SLA+W) to EEPROM */
 234   1          clr_SI;
 235   1          while (!SI);
 236   1          if (I2STAT != 0x18)                     /* 0x18: SLA+W has been transmitted; ACK has been received */ 
             -            
 237   1          {
 238   2              I2C_Reset_Flag = 1;
 239   2              printf("\nI2C 'Send SLA+W' error");
 240   2              goto Write_Error_Stop;
 241   2          }
 242   1      
 243   1          /* Step3 */
 244   1          I2DAT = HIBYTE(u16Address);             /* Send EEPROM's High Byte Address */
 245   1          clr_SI;
 246   1          while (!SI);
 247   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 248   1          {
 249   2              I2C_Reset_Flag = 1;
 250   2              printf("\nI2C 'Send High byte address' error");
 251   2              goto Write_Error_Stop;
 252   2          }
 253   1      
 254   1          /* Step4 */
 255   1          I2DAT = LOBYTE(u16Address);             /* Send EEPROM's Low Byte Address */
 256   1          clr_SI;
 257   1          while (!SI);
 258   1          if (I2STAT != 0x28)                     /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 259   1          {
 260   2              I2C_Reset_Flag = 1;
 261   2              printf("\nI2C 'Send Low byte address' error");
 262   2              goto Write_Error_Stop;
 263   2          }
 264   1      
 265   1          /* Step5 */
 266   1                                                  /* Write data to I2C EEPROM */
 267   1          for (u8Count = 0; u8Count < PAGE_SIZE; u8Count++)
 268   1          {
 269   2              I2DAT = u8DAT;                      /* Send data to EEPROM */
 270   2              clr_SI;
 271   2              while (!SI);
 272   2              if (I2STAT != 0x28)                 /* 0x28:  Data byte in S1DAT has been transmitted; ACK has bee
             -n received */
 273   2              {
 274   3                  I2C_Reset_Flag = 1;
 275   3                  printf("\nI2C 'Write Data' error");
 276   3                  goto Write_Error_Stop;
 277   3              }   
 278   2              u8DAT = ~u8DAT;        
 279   2          }
 280   1                                                  //After STOP condition, a inner EEPROM timed-write-cycle 
 281   1                                                  //will occure and EEPROM will not response to outside command
 282   1                                                  /* 0x18: SLA+W has been transmitted; ACK has been received */
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 6   

 283   1          /* Step6 */
 284   1          do
 285   1          {
 286   2              set_STO;                            /* Set I2C STOP Control Bit */
 287   2              clr_SI;
 288   2              while (STO)                        /* Check STOP signal */
 289   2              {
 290   3                I2C_SI_Check();
 291   3                if (I2C_Reset_Flag)
 292   3                  goto Write_Error_Stop;
 293   3              }
 294   2              
 295   2              set_STA;                            /* Check if no ACK is returned by EEPROM, it is under timed-wr
             -ite cycle */
 296   2              clr_SI;
 297   2              while (!SI);
 298   2              if (I2STAT != 0x08)                 /* 0x08:  A START condition has been transmitted*/
 299   2              {
 300   3                  I2C_Reset_Flag = 1;
 301   3                  printf("\nI2C 'Wait Ready' error");
 302   3                  goto Write_Error_Stop;
 303   3              }
 304   2      
 305   2              clr_STA;                            /* Clear STA and Keep SI value in I2CON */
 306   2              I2DAT = (EEPROM_SLA | EEPROM_WR);   /* Send (SLA+W) to EEPROM */
 307   2              clr_SI;
 308   2              while (!SI);
 309   2          }while(I2STAT != 0x18);
 310   1      
 311   1          /* Step7 */
 312   1          set_STO;                                /* Set STOP Bit to I2C EEPROM */
 313   1          clr_SI;
 314   1          while (STO)                        /* Check STOP signal */
 315   1          {
 316   2            I2C_SI_Check();
 317   2            if (I2C_Reset_Flag)
 318   2              goto Write_Error_Stop;
 319   2          }
 320   1          
 321   1      Write_Error_Stop: 
 322   1          if (I2C_Reset_Flag)
 323   1          {
 324   2              I2C_SI_Check();
 325   2              I2C_Reset_Flag  = 0;
 326   2              printf("\nI2C Write error, test stop");
 327   2          }
 328   1          
 329   1          
 330   1      }
 331          //========================================================================================================
 332          void main(void)
 333          {
 334   1      
 335   1          Set_All_GPIO_Quasi_Mode;
 336   1          InitialUART0_Timer3(115200);
 337   1        
 338   1          /* Initial I2C function */
 339   1          Init_I2C();                                 //initial I2C circuit
 340   1          
 341   1          /* page0 R/W */
 342   1          printf ("\n\n24LC64 Page0 Write (0x55,0xAA...)...");
 343   1          One_Page_Write(0,0x55);                     //page0, write 0x55,0xAA,........
C51 COMPILER V9.52.0.0   I2C_EEPROM                                                        07/06/2017 11:27:47 PAGE 7   

 344   1      
 345   1          printf ("\n\n24LC64 Page0 Read...");
 346   1          One_Page_Read (0,0x55);                     //page0, read  0x55,0xAA,........
 347   1      
 348   1          /* page1 R/W */
 349   1          printf ("\n\n24LC64 Page1 Write (0x00,0xFF...)...");
 350   1          One_Page_Write(1,0x00);                     //page1, write 0x00,0xFF,........
 351   1          printf ("\n\n24LC64 Page1 Read...");
 352   1          One_Page_Read (1,0x00);                     //page1, read  0x00,0xFF,........
 353   1      
 354   1          /* page2 R/W */
 355   1          printf ("\n\n24LC64 Page2 Write (0xAA,0x55...)...");
 356   1          One_Page_Write(2,0xAA);                     //page2, write 0xAA,0x55,........
 357   1          printf ("\n\n24LC64 Page2 Read...");
 358   1          One_Page_Read (2,0xAA);                     //page2, read  0xAA,0x55,........
 359   1      
 360   1          /* page3 R/W */
 361   1          printf ("\n\n24LC64 Page3 Write (0xFF,0x00...)...");
 362   1          One_Page_Write(3,0xFF);                     //page3, write 0xFF,0x00,........
 363   1          printf ("\n\n24LC64 Page3 Read...");
 364   1          One_Page_Read (3,0xFF);                     //page3, read  0xFF,0x00,........
 365   1      
 366   1          /* page255 R/W */
 367   1          printf ("\n\n24LC64 Page255 Write (0x0F,0xF0...)...");
 368   1          One_Page_Write(255,0x0F);                   //page255, write 0x0F,0xF0,........
 369   1          printf ("\n\n24LC64 Page255 Read...");
 370   1          One_Page_Read (255,0x0F);                   //page255, read  0x0F,0xF0,........
 371   1      
 372   1          /* ==== Test Pass ==== */      
 373   1          printf ("\n\N76E003 <--> 24LC64, I2C Demo Code test pass...");
 374   1      
 375   1          while (1);
 376   1      /* =================== */
 377   1      }
 378          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    739    ----
   CONSTANT SIZE    =    746    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
