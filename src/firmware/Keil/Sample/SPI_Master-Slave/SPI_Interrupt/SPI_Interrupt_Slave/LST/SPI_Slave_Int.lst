C51 COMPILER V9.52.0.0   SPI_SLAVE_INT                                                     02/09/2017 15:37:55 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SPI_SLAVE_INT
OBJECT MODULE PLACED IN .\Output\SPI_Slave_Int.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\SPI_Slave_Int.c BROWSE INCDIR(..\..\..\..\Include) DEFINE(FOSC_160000)
                    - DEBUG OBJECTEXTEND PRINT(.\LST\SPI_Slave_Int.lst) TABS(2) OBJECT(.\Output\SPI_Slave_Int.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 SPI in Slave mode demo code
  15          //********************************************************************************************************
             -***
  16          #include "N76E003.h"
  17          #include "SFR_Macro.h"
  18          #include "Function_define.h"
  19          #include "Common.h"
  20          #include "Delay.h"
  21          
  22          //********************************************************************************************************
             -***
  23          //  Application: SPI Function 
  24          //  Slave receive 0x90 and return 0x4E
  25          //  Slave receive 0x01 and return 0x55
  26          //  Slave receive 0x02 and return 0x56
  27          //  Slave receive 0x03 and return 0x4F
  28          //  Slave receive 0x04 and return 0x54
  29          //
  30          //  Slave send 0x4F and 0x4E to Master after receiving
  31          //  
  32          //  Output : P1.2 GPIO flash when SPI pass.
  33          //           P0.7 flash when SPI error 
  34          //********************************************************************************************************
             -***
  35          
  36          UINT8   u8Receive_Data[5];
  37          UINT16  u16CNT = 0;
  38          bit     SPI_Send_Flag = 0;
  39          
  40          //--------------------------------------------------------------------------------------------------------
             ----
  41          void SPI_Error(void)
  42          {
C51 COMPILER V9.52.0.0   SPI_SLAVE_INT                                                     02/09/2017 15:37:55 PAGE 2   

  43   1          while(1)                                    // SPI error and P0.7 flash/
  44   1          {
  45   2              P07 = 1;
  46   2              Timer0_Delay1ms(500);
  47   2              P07 = 0;
  48   2              Timer0_Delay1ms(500);
  49   2          }
  50   1      }
  51          //--------------------------------------------------------------------------------------------------------
             ----
  52          void SPI_Initial(void)
  53          { 
  54   1          P15_Quasi_Mode;                           //P15 (SS) Quasi mode
  55   1          P10_Quasi_Mode;                           //P10(SPCLK) Quasi mode
  56   1          P00_Quasi_Mode;                           //P00 (MOSI) Quasi mode
  57   1          P01_Quasi_Mode;                           //P22 (MISO) Quasi mode;
  58   1      
  59   1          clr_MSTR;                                   // SPI in Slave mode 
  60   1          clr_LSBFE;                                  // MSB first 
  61   1      
  62   1          clr_CPOL;                                   // The SPI clock is low in idle mode
  63   1          set_CPHA;                                   // The data is sample on the second edge of SPI clock     
  64   1             
  65   1          Enable_SPI_Interrupt;                       // Enable SPI interrupt
  66   1          set_SPIEN;                                  // Enable SPI function
  67   1          
  68   1          clr_SPIF;                                   // Clear SPI flag
  69   1      }
  70          //--------------------------------------------------------------------------------------------------------
             ----
  71          void Slave_Receive_Data(void)
  72          {
  73   1          SPDR = 0x4E;                             
  74   1          PCON |= SET_BIT0;                           // Enter idle mode 
  75   1          if(u8Receive_Data[0] != 0x90)               // Receive 1st DATA form master 
  76   1              SPI_Error(); 
  77   1                
  78   1          SPDR = 0x55;
  79   1          PCON |= SET_BIT0;                           // Enter idle mode                       
  80   1          if(u8Receive_Data[1] != 0x01)               // Receive 2nd DATA form master 
  81   1              SPI_Error();
  82   1      
  83   1          SPDR = 0x56;
  84   1          PCON |= SET_BIT0;                           // Enter idle mode
  85   1          if(u8Receive_Data[2] != 0x02)               // Receive 3rd DATA form master 
  86   1              SPI_Error();
  87   1      
  88   1          SPDR = 0x4F;
  89   1          PCON |= SET_BIT0;                           // Enter idle mode
  90   1          if(u8Receive_Data[3] != 0x03)               // Receive 4th DATA form master 
  91   1              SPI_Error();
  92   1      
  93   1          SPDR = 0x54;
  94   1          PCON |= SET_BIT0;                           // Enter idle mode
  95   1          if(u8Receive_Data[4] != 0x04)               // Receive 5th DATA form master 
  96   1              SPI_Error();
  97   1      }
  98          //--------------------------------------------------------------------------------------------------------
             ----
  99          void Slave_Transmit_Data(void)
 100          {
 101   1          SPI_Send_Flag = 1;
C51 COMPILER V9.52.0.0   SPI_SLAVE_INT                                                     02/09/2017 15:37:55 PAGE 3   

 102   1          SPDR = 0x4F;                                // Send 1st data (04F) to Master
 103   1          PCON |= SET_BIT0;                           // Enter idle mode       
 104   1      
 105   1          SPI_Send_Flag = 1;
 106   1          SPDR = 0x4E;                                // Send 2nd data (0x4E) to Master 
 107   1          PCON |= SET_BIT0;                           // Enter idle mode
 108   1      }
 109          //--------------------------------------------------------------------------------------------------------
             ----
 110          void main(void)
 111          {   
 112   1          Set_All_GPIO_Quasi_Mode;
 113   1          InitialUART0_Timer1(115200);             /* 115200 Baud Rate*/
 114   1       
 115   1          SPI_Initial();
 116   1      
 117   1          printf ("\nSPI Start Receive...\n");
 118   1      
 119   1          Slave_Receive_Data();                       // Slave receive data from master
 120   1          Slave_Transmit_Data();                      // Slave transmit data to master
 121   1      
 122   1          clr_ESPI;
 123   1          SPDR = 0x00;
 124   1          printf ("\nSPI Test OK!\n");
 125   1          while(1)                                    // SPI transmission finish
 126   1          {
 127   2              P12 = 1;
 128   2              Timer0_Delay1ms(500);
 129   2              P12 = 0;
 130   2              Timer0_Delay1ms(500);
 131   2          }
 132   1      }
 133          //--------------------------------------------------------------------------------------------------------
             ----
 134          void SPI_ISR(void) interrupt 9                  // Vecotr @  0x4B
 135          {
 136   1          clr_SPIF;                                   
 137   1          if(!SPI_Send_Flag)
 138   1          {       
 139   2              u8Receive_Data[u16CNT] = SPDR;
 140   2              u16CNT ++;
 141   2          }
 142   1          SPI_Send_Flag = 0; 
 143   1      }
 144          //--------------------------------------------------------------------------------------------------------
             ----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    291    ----
   CONSTANT SIZE    =     38    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      7    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
