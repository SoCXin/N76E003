C51 COMPILER V9.52.0.0   SPI_SLAVE_PO                                                      02/09/2017 16:16:44 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE SPI_SLAVE_PO
OBJECT MODULE PLACED IN .\Output\SPI_Slave_Po.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Code\SPI_Slave_Po.c BROWSE INCDIR(..\..\..\..\Include) DEFINE(FOSC_160000) 
                    -DEBUG OBJECTEXTEND PRINT(.\LST\SPI_Slave_Po.lst) TABS(2) OBJECT(.\Output\SPI_Slave_Po.obj)

line level    source

   1          /*--------------------------------------------------------------------------------------------------------
             --*/
   2          /*                                                                                                        
             - */
   3          /* Copyright(c) 2017 Nuvoton Technology Corp. All rights reserved.                                        
             - */
   4          /*                                                                                                        
             - */
   5          /*--------------------------------------------------------------------------------------------------------
             --*/
   6          
   7          //********************************************************************************************************
             -***
   8          //  Website: http://www.nuvoton.com
   9          //  E-Mail : MicroC-8bit@nuvoton.com
  10          //  Date   : Jan/21/2017
  11          //********************************************************************************************************
             -***
  12          
  13          //********************************************************************************************************
             -***
  14          //  File Function: N76E003 SPI in Slave mode demo code
  15          //********************************************************************************************************
             -***
  16          #include "N76E003.h"
  17          #include "SFR_Macro.h"
  18          #include "Function_define.h"
  19          #include "Common.h"
  20          #include "Delay.h"
  21          
  22          //********************************************************************************************************
             -***
  23          //  Application: SPI Function 
  24          //  Slave receive 0x90 and return 0x4E
  25          //  Slave receive 0x01 and return 0x55
  26          //  Slave receive 0x02 and return 0x56
  27          //  Slave receive 0x03 and return 0x4F
  28          //  Slave receive 0x04 and return 0x54
  29          //
  30          //  Slave send 0x4F and 0x4E to Master after receiving
  31          //  
  32          //  Output : P1.2 (GPIO1) flash when SPI pass.
  33          //           P0.7 flash when SPI error 
  34          //********************************************************************************************************
             -***
  35          
  36          
  37          //--------------------------------------------------------------------------------------------------------
             ----
  38          void SPI_Error(void)
  39          {
  40   1          while(1)                                    // SPI error and P0.7 flash/
  41   1          {
  42   2              P07 = 1;
C51 COMPILER V9.52.0.0   SPI_SLAVE_PO                                                      02/09/2017 16:16:44 PAGE 2   

  43   2              Timer0_Delay1ms(500);
  44   2              P07 = 0;
  45   2              Timer0_Delay1ms(500);
  46   2          }
  47   1      }
  48          //--------------------------------------------------------------------------------------------------------
             ----
  49          void SPI_Initial(void)
  50          { 
  51   1          P15_Quasi_Mode;                           // P15 (SS) Quasi mode
  52   1          P10_Quasi_Mode;                           // P10(SPCLK) Quasi mode
  53   1          P00_Quasi_Mode;                           // P00 (MOSI) Quasi mode
  54   1          P01_Quasi_Mode;                           // P22 (MISO) Quasi mode
  55   1                  
  56   1          set_P0S_5;                                  //Schmitt triggered input select.
  57   1          
  58   1          clr_MSTR;                                   // SPI in Slave mode 
  59   1          clr_LSBFE;                                  // MSB first 
  60   1      
  61   1          clr_CPOL;                                   // The SPI clock is low in idle mode
  62   1          set_CPHA;                                   // The data is sample on the second edge of SPI clock     
  63   1             
  64   1          set_SPIEN;                                  // Enable SPI function
  65   1          clr_SPIF; 
  66   1      }
  67          //--------------------------------------------------------------------------------------------------------
             ----
  68          void Slave_Receive_Data(void)
  69          {
  70   1          SPDR = 0x4E;                                // Receive Master 1st DATA 
  71   1          while(!(SPSR & SET_BIT7));          
  72   1          clr_SPIF;
  73   1          if(SPDR != 0x90)                      
  74   1             SPI_Error(); 
  75   1                                                      
  76   1          SPDR = 0x55;                                // Receive Master 2nd DATA 
  77   1          while(!(SPSR & SET_BIT7));          
  78   1          clr_SPIF;
  79   1          if(SPDR != 0x01)
  80   1             SPI_Error();
  81   1                                                       
  82   1          SPDR = 0x56;                                // Receive Master 3rd DATA
  83   1          while(!(SPSR & SET_BIT7));                  
  84   1          clr_SPIF;
  85   1          if(SPDR != 0x02)
  86   1              SPI_Error();
  87   1          
  88   1          SPDR = 0x4F;                                // Receive Master 4th DATA 
  89   1          while(!(SPSR & SET_BIT7));                  
  90   1          clr_SPIF;
  91   1          if(SPDR != 0x03)
  92   1              SPI_Error();
  93   1                                                      
  94   1          SPDR = 0x54;                                // Receive Master 5th DATA
  95   1          while(!(SPSR & SET_BIT7));                   
  96   1          clr_SPIF;
  97   1          if(SPDR != 0x04)
  98   1              SPI_Error();
  99   1      }
 100          //--------------------------------------------------------------------------------------------------------
             ----
 101          void Slave_tranmit_Data(void)
C51 COMPILER V9.52.0.0   SPI_SLAVE_PO                                                      02/09/2017 16:16:44 PAGE 3   

 102          {
 103   1          SPDR = 0x4F;                                // Send 1st data (0x4F) to Master 
 104   1          while(!(SPSR & SET_BIT7));      
 105   1          clr_SPIF;
 106   1          if(SPDR != 0xFF)
 107   1              SPI_Error();
 108   1          
 109   1          SPDR = 0x4E;                                // Send 2nd data (0x4E) to Master 
 110   1          while(!(SPSR & SET_BIT7));      
 111   1          clr_SPIF;
 112   1          if(SPDR != 0xFF)
 113   1              SPI_Error();
 114   1      }
 115          //--------------------------------------------------------------------------------------------------------
             ----
 116          void main(void)
 117          {   
 118   1           Set_All_GPIO_Quasi_Mode;
 119   1          InitialUART0_Timer1(115200);             /* 9600 Baud Rate*/
 120   1      
 121   1          SPI_Initial();
 122   1      
 123   1          printf ("\nSPI Start Receive...\n");    
 124   1               
 125   1          Slave_Receive_Data();                       // Slave receive data from master
 126   1          Slave_tranmit_Data();                       // Slave transmit data to master
 127   1          while(1)                                    
 128   1          {
 129   2              P12 = 1;
 130   2              Timer0_Delay1ms(500);
 131   2              P12 = 0;
 132   2              Timer0_Delay1ms(500);
 133   2          }
 134   1      }
 135          //--------------------------------------------------------------------------------------------------------
             ----


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    308    ----
   CONSTANT SIZE    =     23    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
